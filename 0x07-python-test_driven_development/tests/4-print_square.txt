
============================
steps to Use 4-print_square.py
============================

module define square-printing func ``print_square(size)``.

Usage
=====

Squares printed using ``#`` character. parameter ``size``
represents height and width of square.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(4)
    ####
    ####
    ####
    ####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

If ``size`` is zero, func prints nothing.

::

    >>> print_square(0)

Invalid Sizes
=============

parameter ``size`` must be int. Otherwise, TypeError is raised.

::

    >>> print_square("not an int")
    Traceback (most recent call last):
    TypeError: size must be int

::

    >>> print_square(5.5)
    Traceback (most recent call last):
    TypeError: size must be int

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be int

If ``size`` is less than zero, ValueError is raised.

::

    >>> print_square(-7)
    Traceback (most recent call last):
    ValueError: size must be >= 0

Note : type-checking occurs prior to value-checking.

::

    >>> print_square(-7.5)
    Traceback (most recent call last):
    TypeError: size must be int

one argument must be provided.

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'
